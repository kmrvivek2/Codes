package quickRun;

/*

In your application you need to let users perform the following operations on taks:
    create, read, update, delete;
    describe;
    get all;
    describe all.

To fulfill the requirements, you need to:
    add missing annotations to a TaskController class.
    implement all methods and add required annotations to make them available through HTTP calls.

Tips:
    Use TaskDto to get information from the user and send it back to them.

Requirements:
    1. Create one:
        Request:
            URL: /tasks
            Method: POST
            Payload(example):{"title":"Task 1","description":"Description 1"}
            }
        Response:
            Status: 200
            Body (example): 13
        Comments:
            During creation you can only set the title and description of a Task
            Response body is the id of the created Task

Source:
    TaskRepository:
        public interface TaskRepository extends CrudRepository<Task, Long> {}
    Task:
        @Entity
        public class Task {
            @Id
            @GeneratedValue
            private Long id;

            private String title;
            private String description;
            private TaskStatus status = CREATED;

            public Task(String title) {
                this.title = title;
            }

            private Task() {}

            public void setTitle(String title) {
                this.title = title;
            }

            public void setDescription(String description) {
                this.description = description;
            }

            public void setTaskStatus(TaskStatus status) {
                this.status = status;
            }

            public Long getId() {
                return id;
            }

            public TaskDto toDto() {
                return new TaskDto(String.valueOf(id), title, description, status.name());
            }
        }

    TaskStatus:
        public enum TaskStatus {
            CREATED, APPROVED, REJECTED, BLOCKED, DONE
        }
    TaskDto:
        public class TaskDto {
            private String id;
            private String title;
            private String description;
            private String status;

            TaskDto(String id, String title, String description, String status) {
                this.id = id;
                this.title = title;
                this.description = description;
                this.status = status;
            }

            TaskDto() {}

            public String getId() {
                return id;
            }

            public String getTitle() {
                return title;
            }

            public String getDescription() {
                return description;
            }

            public String getStatus() {
                return status;
            }
        }


 */

import com.codility.domain.*;
import com.google.common.collect.Streams;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;
import java.util.stream.*;

import static java.util.Arrays.asList;
import static java.util.stream.Collectors.toList;

@RestController
@RequestMapping("/tasks")
public class TaskController {
    private final TaskRepository repository;

    @Autowired
    public TaskController(TaskRepository repository) {
        this.repository = repository;
    }

    @PostMapping
    public ResponseEntity<Long> createTask(@RequestBody TaskDto taskDto) {
        Task task = new Task(taskDto.getTitle());
        task.setDescription(taskDto.getDescription());
        Task savedTask = repository.save(task);
        return ResponseEntity.ok(savedTask.getId());
    }

    @GetMapping("/{id}")
    public ResponseEntity<TaskDto> getTask(@PathVariable Long id) {
        return repository.findById(id)
                .map(task -> ResponseEntity.ok(task.toDto()))
                .orElse(ResponseEntity.noContent().build());
    }

    @PutMapping("/{id}")
    public ResponseEntity<?> updateTask(@PathVariable Long id, @RequestBody TaskDto taskDto) {
        List<String> validStatuses = Arrays.stream(TaskStatus.values())
                .map(Enum::name)
                .collect(Collectors.toList());

        if (taskDto.getStatus() != null && !validStatuses.contains(taskDto.getStatus())) {
            return ResponseEntity.ok("Available statuses are: " + String.join(",", validStatuses)+".");
        }

        return repository.findById(id)
                .map(task -> {
                    if (taskDto.getTitle() != null) {
                        task.setTitle(taskDto.getTitle());
                    }
                    if (taskDto.getDescription() != null) {
                        task.setDescription(taskDto.getDescription());
                    }
                    if (taskDto.getStatus() != null) {
                        task.setTaskStatus(TaskStatus.valueOf(taskDto.getStatus()));
                    }
                    repository.save(task);
                    return ResponseEntity.ok().build();
                })
                .orElse(ResponseEntity.noContent().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Object> deleteTask(@PathVariable Long id) {
        return repository.findById(id)
                .map(task -> {
                    repository.delete(task);
                    return ResponseEntity.ok().build();
                })
                .orElse(ResponseEntity.noContent().build());
    }

    @GetMapping("/describe/{id}")
    public ResponseEntity<List<String>> describeTask(@PathVariable Long id) {
        return repository.findById(id)
                .map(task -> {
                    String description = "Description of Task [" + task.getId() + ": " + getTitle(task) + "] is: " + getDescription(task);
                    return ResponseEntity.ok(Collections.singletonList(description));
                })
                .orElseGet(() -> {
                    String message = "Task with id = " + id + " does not exist";
                    return ResponseEntity.ok(Collections.singletonList(message));
                });
    }

    @GetMapping("/describe")
    public ResponseEntity<List<String>> describeAllTasks() {
        List<String> descriptions = ((List<Task>) repository.findAll())
                .stream()
                .map(task -> "Description of Task [" + task.getId() + ": " + getTitle(task) + "] is: " + getDescription(task))
                .collect(Collectors.toList());
        return ResponseEntity.ok(descriptions);
    }

    @GetMapping
    public ResponseEntity<List<TaskDto>> getAllTasks() {
        List<TaskDto> tasks = ((List<Task>) repository.findAll())
                .stream()
                .map(Task::toDto)
                .collect(Collectors.toList());
        return ResponseEntity.ok(tasks);
    }

    private String getTitle(Task task) {
        return task.toDto().getTitle();
    }

    private String getDescription(Task task) {
        return task.toDto().getDescription();
    }
}
